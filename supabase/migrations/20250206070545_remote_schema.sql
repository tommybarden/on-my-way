create table "public"."Alarms" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "description" character varying,
    "location" character varying,
    "units" character varying,
    "status" smallint
);


alter table "public"."Alarms" enable row level security;

create table "public"."Log" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "category" character varying,
    "message" character varying
);


alter table "public"."Log" enable row level security;

create table "public"."Push_subscriptions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid default auth.uid(),
    "subscription" jsonb not null
);


alter table "public"."Push_subscriptions" enable row level security;

create table "public"."Responses" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "alarm_id" bigint not null,
    "status" character varying,
    "created_by" uuid not null default auth.uid(),
    "minutes" smallint default '0'::smallint
);


alter table "public"."Responses" enable row level security;

create table "public"."Unit_starts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "alarm_id" bigint,
    "unit" character varying
);


alter table "public"."Unit_starts" enable row level security;

CREATE UNIQUE INDEX "Alarms_pkey" ON public."Alarms" USING btree (id);

CREATE UNIQUE INDEX "Log_pkey" ON public."Log" USING btree (id);

CREATE UNIQUE INDEX "Push_subscriptions_pkey" ON public."Push_subscriptions" USING btree (id);

CREATE UNIQUE INDEX "Responses_pkey" ON public."Responses" USING btree (id);

CREATE UNIQUE INDEX "Unit_starts_pkey" ON public."Unit_starts" USING btree (id);

alter table "public"."Alarms" add constraint "Alarms_pkey" PRIMARY KEY using index "Alarms_pkey";

alter table "public"."Log" add constraint "Log_pkey" PRIMARY KEY using index "Log_pkey";

alter table "public"."Push_subscriptions" add constraint "Push_subscriptions_pkey" PRIMARY KEY using index "Push_subscriptions_pkey";

alter table "public"."Responses" add constraint "Responses_pkey" PRIMARY KEY using index "Responses_pkey";

alter table "public"."Unit_starts" add constraint "Unit_starts_pkey" PRIMARY KEY using index "Unit_starts_pkey";

alter table "public"."Push_subscriptions" add constraint "Push_subscriptions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."Push_subscriptions" validate constraint "Push_subscriptions_user_id_fkey";

alter table "public"."Responses" add constraint "Responses_alarm_id_fkey" FOREIGN KEY (alarm_id) REFERENCES "Alarms"(id) ON DELETE SET NULL not valid;

alter table "public"."Responses" validate constraint "Responses_alarm_id_fkey";

alter table "public"."Responses" add constraint "Responses_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) not valid;

alter table "public"."Responses" validate constraint "Responses_created_by_fkey";

alter table "public"."Unit_starts" add constraint "Unit_starts_alarm_id_fkey" FOREIGN KEY (alarm_id) REFERENCES "Alarms"(id) not valid;

alter table "public"."Unit_starts" validate constraint "Unit_starts_alarm_id_fkey";

grant delete on table "public"."Alarms" to "anon";

grant insert on table "public"."Alarms" to "anon";

grant references on table "public"."Alarms" to "anon";

grant select on table "public"."Alarms" to "anon";

grant trigger on table "public"."Alarms" to "anon";

grant truncate on table "public"."Alarms" to "anon";

grant update on table "public"."Alarms" to "anon";

grant delete on table "public"."Alarms" to "authenticated";

grant insert on table "public"."Alarms" to "authenticated";

grant references on table "public"."Alarms" to "authenticated";

grant select on table "public"."Alarms" to "authenticated";

grant trigger on table "public"."Alarms" to "authenticated";

grant truncate on table "public"."Alarms" to "authenticated";

grant update on table "public"."Alarms" to "authenticated";

grant delete on table "public"."Alarms" to "service_role";

grant insert on table "public"."Alarms" to "service_role";

grant references on table "public"."Alarms" to "service_role";

grant select on table "public"."Alarms" to "service_role";

grant trigger on table "public"."Alarms" to "service_role";

grant truncate on table "public"."Alarms" to "service_role";

grant update on table "public"."Alarms" to "service_role";

grant delete on table "public"."Log" to "anon";

grant insert on table "public"."Log" to "anon";

grant references on table "public"."Log" to "anon";

grant select on table "public"."Log" to "anon";

grant trigger on table "public"."Log" to "anon";

grant truncate on table "public"."Log" to "anon";

grant update on table "public"."Log" to "anon";

grant delete on table "public"."Log" to "authenticated";

grant insert on table "public"."Log" to "authenticated";

grant references on table "public"."Log" to "authenticated";

grant select on table "public"."Log" to "authenticated";

grant trigger on table "public"."Log" to "authenticated";

grant truncate on table "public"."Log" to "authenticated";

grant update on table "public"."Log" to "authenticated";

grant delete on table "public"."Log" to "service_role";

grant insert on table "public"."Log" to "service_role";

grant references on table "public"."Log" to "service_role";

grant select on table "public"."Log" to "service_role";

grant trigger on table "public"."Log" to "service_role";

grant truncate on table "public"."Log" to "service_role";

grant update on table "public"."Log" to "service_role";

grant delete on table "public"."Push_subscriptions" to "anon";

grant insert on table "public"."Push_subscriptions" to "anon";

grant references on table "public"."Push_subscriptions" to "anon";

grant select on table "public"."Push_subscriptions" to "anon";

grant trigger on table "public"."Push_subscriptions" to "anon";

grant truncate on table "public"."Push_subscriptions" to "anon";

grant update on table "public"."Push_subscriptions" to "anon";

grant delete on table "public"."Push_subscriptions" to "authenticated";

grant insert on table "public"."Push_subscriptions" to "authenticated";

grant references on table "public"."Push_subscriptions" to "authenticated";

grant select on table "public"."Push_subscriptions" to "authenticated";

grant trigger on table "public"."Push_subscriptions" to "authenticated";

grant truncate on table "public"."Push_subscriptions" to "authenticated";

grant update on table "public"."Push_subscriptions" to "authenticated";

grant delete on table "public"."Push_subscriptions" to "service_role";

grant insert on table "public"."Push_subscriptions" to "service_role";

grant references on table "public"."Push_subscriptions" to "service_role";

grant select on table "public"."Push_subscriptions" to "service_role";

grant trigger on table "public"."Push_subscriptions" to "service_role";

grant truncate on table "public"."Push_subscriptions" to "service_role";

grant update on table "public"."Push_subscriptions" to "service_role";

grant delete on table "public"."Responses" to "anon";

grant insert on table "public"."Responses" to "anon";

grant references on table "public"."Responses" to "anon";

grant select on table "public"."Responses" to "anon";

grant trigger on table "public"."Responses" to "anon";

grant truncate on table "public"."Responses" to "anon";

grant update on table "public"."Responses" to "anon";

grant delete on table "public"."Responses" to "authenticated";

grant insert on table "public"."Responses" to "authenticated";

grant references on table "public"."Responses" to "authenticated";

grant select on table "public"."Responses" to "authenticated";

grant trigger on table "public"."Responses" to "authenticated";

grant truncate on table "public"."Responses" to "authenticated";

grant update on table "public"."Responses" to "authenticated";

grant delete on table "public"."Responses" to "service_role";

grant insert on table "public"."Responses" to "service_role";

grant references on table "public"."Responses" to "service_role";

grant select on table "public"."Responses" to "service_role";

grant trigger on table "public"."Responses" to "service_role";

grant truncate on table "public"."Responses" to "service_role";

grant update on table "public"."Responses" to "service_role";

grant delete on table "public"."Unit_starts" to "anon";

grant insert on table "public"."Unit_starts" to "anon";

grant references on table "public"."Unit_starts" to "anon";

grant select on table "public"."Unit_starts" to "anon";

grant trigger on table "public"."Unit_starts" to "anon";

grant truncate on table "public"."Unit_starts" to "anon";

grant update on table "public"."Unit_starts" to "anon";

grant delete on table "public"."Unit_starts" to "authenticated";

grant insert on table "public"."Unit_starts" to "authenticated";

grant references on table "public"."Unit_starts" to "authenticated";

grant select on table "public"."Unit_starts" to "authenticated";

grant trigger on table "public"."Unit_starts" to "authenticated";

grant truncate on table "public"."Unit_starts" to "authenticated";

grant update on table "public"."Unit_starts" to "authenticated";

grant delete on table "public"."Unit_starts" to "service_role";

grant insert on table "public"."Unit_starts" to "service_role";

grant references on table "public"."Unit_starts" to "service_role";

grant select on table "public"."Unit_starts" to "service_role";

grant trigger on table "public"."Unit_starts" to "service_role";

grant truncate on table "public"."Unit_starts" to "service_role";

grant update on table "public"."Unit_starts" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."Alarms"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."Alarms"
as permissive
for select
to public
using (true);


create policy "Enable update for authenticated users"
on "public"."Alarms"
as permissive
for update
to public
using ((auth.uid() IS NOT NULL))
with check ((auth.uid() IS NOT NULL));


create policy "Enable delete for users based on user_id"
on "public"."Log"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) IS NOT NULL));


create policy "Enable insert for authenticated users only"
on "public"."Log"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."Log"
as permissive
for select
to public
using (true);


create policy "Enable insert for users based on user_id"
on "public"."Push_subscriptions"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."Push_subscriptions"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on user_id"
on "public"."Push_subscriptions"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."Responses"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."Responses"
as permissive
for select
to public
using (true);


create policy "Enable users to delete their own data only"
on "public"."Responses"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = created_by));


create policy "Enable users to update their own data"
on "public"."Responses"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = created_by));


create policy "Enable delete for authenticated users only"
on "public"."Unit_starts"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) IS NOT NULL));


create policy "Enable insert for all users"
on "public"."Unit_starts"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."Unit_starts"
as permissive
for select
to public
using (true);



